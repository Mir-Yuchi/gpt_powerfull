import os

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher import FSMContext
from loader import dp
from handlers.users import misc as ms
from utils.db_api import database as db
from data import config as cfg
from keyboards import ik, kb
from loader import bot
from utils import GPT as gpt


class UserState(StatesGroup):
    name = State()
    chat = State()
    draw = State()
    sender = State()
    add_btn_url = State()
    add_btn_name = State()
    midjourney = State()
    delete_users = State()


class Add_Channel(StatesGroup):
    c_id = State()
    c_name = State()
    c_url = State()


class Add_projects(StatesGroup):
    c_name = State()
    c_url = State()


@dp.message_handler(state=Add_projects.c_url)
async def main(message: types.Message, state: FSMContext):
    url = message.text
    await state.update_data(url=url)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∫–Ω–æ–ø–∫–µ")
    await Add_projects.c_name.set()


@dp.message_handler(state=Add_projects.c_name)
async def main(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    data = await state.get_data()
    db.create_projects(data['url'], name)
    await state.finish()
    await message.answer("‚úÖ–î–æ–±–∞–≤–ª–µ–Ω")


@dp.message_handler(commands=['close'], state="*")
async def close(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç, –ø–∞–º—è—Ç—å Chat GPT –æ—á–∏—â–µ–Ω–∞.")


@dp.message_handler(state=UserState.chat)
async def main(message: types.Message, state: FSMContext):
    action = await dispatcher_buttons(message, state)
    if action == 1:
        return

    old_chat_history = db.get_chat(message.from_user.id)
    sub_status = await ms.check_subscribes(message.from_user.id)

    if sub_status == False and len(old_chat_history) != 0:
        await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Chat GPT.\n"
                             "<b>–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –±–æ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º!</b>", reply_markup=ik.adv_chats())
        return

    await state.finish()
    msg = await message.answer("‚è≥")
    promt = message.text.replace("\"", "")
    answer = await ms.get_gpt_answer(message.from_user.id, promt, old_chat_history, 0)
    await msg.delete()
    await msg.answer(answer)
    await UserState.chat.set()


@dp.message_handler(state=UserState.draw)
async def main(message: types.Message, state: FSMContext):
    action = await dispatcher_buttons(message, state)
    if action == 1:
        return

    await state.finish()
    msg = await message.answer("üé®")
    try:
        answer = await gpt.davinci(message.text, ms.get_random_token(), 1024)
    except:
        await msg.delete()
        await message.answer("üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ!")
        await UserState.draw.set()
        return
    await msg.delete()
    await msg.answer_photo(photo=answer)
    await UserState.draw.set()


async def dispatcher_buttons(message: types.Message, state: FSMContext):
    if message.text == "üîÅ–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
        db.clear_chat(message.from_user.id)
        await message.answer("‚úÖ–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –±–æ—Ç–æ–º —Å–±—Ä–æ—à–µ–Ω")
        return 1
    elif message.text == "‚óÄÔ∏è–ù–∞–∑–∞–¥":
        image = cfg.image
        await message.answer_photo(photo=image, caption=f"üëª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                   reply_markup=kb.main)
        await state.finish()
        return 1
    else:
        return 0


@dp.message_handler(state=UserState.sender, content_types=types.ContentType.ANY)
async def main(message: types.Message, state: FSMContext):
    msg_id = message.message_id
    await bot.copy_message(chat_id=message.from_user.id, from_chat_id=message.from_user.id,
                           message_id=msg_id)
    await message.answer("–†–∞—Å—Å—ã–ª–∞–µ–º?", reply_markup=ik.send(msg_id))
    await state.finish()


@dp.message_handler(state=UserState.add_btn_url)
async def main(message: types.Message, state: FSMContext):
    url = message.text
    await state.update_data(url=url)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∫–Ω–æ–ø–∫–µ")
    await UserState.add_btn_name.set()


@dp.message_handler(state=UserState.add_btn_name)
async def main(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    data = await state.get_data()
    mrkp = ik.create_sender_mrkp(name, data['url'])
    message_to_send = await bot.copy_message(chat_id=message.from_user.id, from_chat_id=message.from_user.id,
                                             message_id=data['message_id'], reply_markup=mrkp)
    await message.answer('–†–∞—Å—Å—ã–ª–∞–µ–º?', reply_markup=ik.send(message_to_send.message_id))


@dp.message_handler(state=Add_Channel.c_id)
async def main(message: types.Message, state: FSMContext):
    try:
        await state.update_data(id=int(message.text))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞", reply_markup=ik.off_state)
        await Add_Channel.c_name.set()
    except:
        await message.answer("‚ùå–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=ik.off_state)


@dp.message_handler(state=Add_Channel.c_name)
async def main(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", reply_markup=ik.off_state)
    await Add_Channel.c_url.set()


@dp.message_handler(state=Add_Channel.c_url)
async def main(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.finish()

    url = message.text
    db.create_adv_chat(data['id'], url, data['name'])
    await message.answer("‚úÖ–í–∞—à –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")


@dp.message_handler(state=UserState.delete_users, content_types=types.ContentType.DOCUMENT)
async def main(message: types.Message, state: FSMContext):
    await state.finish()
    file_path = (await message.document.get_file())['file_path']
    await message.document.download()
    file = open(file_path, 'r')
    msg = await message.answer("‚è≥")
    s = list(map(int, (file.read().split("\n"))[0:-1]))
    await msg.delete()
    file.close()
    db.delete_users_for_ids(s)
    os.remove(file_path)
    await message.answer("‚úÖ–ú–µ—Ä—Ç–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
